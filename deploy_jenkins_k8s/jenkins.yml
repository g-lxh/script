---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  labels:
    app: jenkins

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jenkins
  labels:
    app: jenkins
rules:
  - apiGroups: [ "" ]
    resources: [ "pods" ]
    verbs: [ "create","delete","get","list","patch","update","watch" ]
  - apiGroups: [ "" ]
    resources: [ "pods/exec" ]
    verbs: [ "create","delete","get","list","patch","update","watch" ]
  - apiGroups: [ "" ]
    resources: [ "pods/log" ]
    verbs: [ "get","list","watch" ]
  - apiGroups: [ "" ]
    resources: [ "secrets" ]
    verbs: [ "get" ]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jenkins
  labels:
    app: jenkins
subjects:
  - kind: ServiceAccount
    name: jenkins
    namespace: jenkins
roleRef:
  kind: Role
  name: jenkins
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      # 注意：k8s 1.21.x 中 serviceAccount 改名为 serviceAccountName
      # 这里填写上面创建的 serviceAccount 的 name
      serviceAccountName: jenkins
      hostAliases:
        - ip: "192.168.2.196"
          hostnames:
            - "hub.kaolayouran.cn"
      containers:
        - name: jenkins
          image: jenkins/jenkins:2.393
          command: [ "/bin/sh", "-c", "mkdir -p ${JENKINS_HOME:-/var/jenkins_home}/jenkins/ && cp -r -n /usr/share/jenkins/* ${JENKINS_HOME:-/var/jenkins_home}/jenkins/ && tini -- /usr/local/bin/jenkins.sh" ]
          imagePullPolicy: Always
          env:
            - name: JENKINS_WAR
              value: /var/jenkins_home/jenkins/jenkins.war
            - name: REF
              value: /var/jenkins_home/jenkins/ref
          securityContext:
            # root 启动, 使用 docker 时必须设置, 否则无权限; 暂时配置, 后续考虑 docker 非 root 运行
            runAsUser: 0
          ports:
            - name: web
              containerPort: 8080
              protocol: TCP
            - name: agent
              containerPort: 5000
              protocol: TCP
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 500m
              memory: 512Mi
          livenessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
          volumeMounts:
            - name: jenkins-persistent-storage
              mountPath: /var/jenkins_home/
              subPath: jenkins_home
            - name: jenkins-persistent-storage
              mountPath: /usr/local/rely/
              subPath: rely
            - name: jenkins-temporary-storage
              mountPath: /usr/local/sbin/ # docker 可执行程序
              subPath: bin
            - name: jenkins-temporary-storage
              mountPath: /var/run/ # docker 通信
              subPath: run
        - name: dind
          image: docker:dind
          # 为了便于在 jenkins 中使用 docker 命令, 将 docker 命令复制到 /usr/local/sbin/ 下, 然后再手动启动 docker 进程, 配置 insecure-registry 忽略SSL校验; registry-mirror 加速器
          command: [ "/bin/sh", "-c", "mkdir -p /usr/local/sbin/ && cp -r /usr/local/bin/docker /usr/local/sbin/ && /usr/local/bin/dockerd-entrypoint.sh dockerd --insecure-registry=$(REGISTRY) --iptables=false --registry-mirror=https://bgus3lrj.mirror.aliyuncs.com" ]
          env:
            - name: REGISTRY
              value: hub.kaolayouran.cn:5000
            - name: DOCKER_TLS_CERTDIR # 默认以 TLS 启动, 监听端口 2376; 设置 DOCKER_TLS_CERTDIR 为空则就以非 TLS 模式启动, 监听端口 2375
              value: ""
          securityContext:
            # 必须以特权启动
            privileged: true
          tty: true
          volumeMounts:
            - name: jenkins-persistent-storage
              mountPath: /var/jenkins_home/ # 将 jenkins 的工作目录也挂载到 dind 中, 避免使用 docker -v 时找不到对应目录
              subPath: jenkins_home
            - name: jenkins-temporary-storage
              mountPath: /usr/local/sbin/ # docker 可执行程序
              subPath: bin
            - name: jenkins-temporary-storage
              mountPath: /var/run/ # docker 通信
              subPath: run
            - name: jenkins-persistent-storage
              mountPath: /root/.m2/ # Maven 依赖
              subPath: .m2
          readinessProbe:
            exec:
              command: [ "docker", "info" ]
            initialDelaySeconds: 10
            failureThreshold: 6
          livenessProbe:
            exec:
              command: [ "docker", "info" ]
            initialDelaySeconds: 60
            failureThreshold: 10
      volumes:
        - name: jenkins-temporary-storage # 存放 docker 可执行程序和 docker 通信的 socket
          emptyDir: { }
        - name: jenkins-persistent-storage
          persistentVolumeClaim:
            claimName: jenkins-pv-claim

---
apiVersion: v1
kind: Service
metadata:
  name: jenkins
  labels:
    app: jenkins
spec:
  selector:
    app: jenkins
  type: NodePort
  ports:
    - name: web
      port: 8080
      nodePort: 30010
      targetPort: web
    - name: agent
      port: 50000
      nodePort: 30011
      targetPort: agent